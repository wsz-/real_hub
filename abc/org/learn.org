#+STYLE: <link rel="stylesheet" type="text/css" href="./style.css">
#+AUTHOR: 王少泽
* 正处理 elisp
  DEADLINE: <2012-08-26 周日>
* linux
 - shell学习指南
* gtk+
 - python
   + pygtk
 - deepinui
 - c
* Project Euler
  - 
* 加密算法RC4
#+begin_src <c>
void rc4_init(unsigned char *s, unsigned char *key, unsigned long Len){
int i =0, j = 0, k[256] = {0};
unsigned char tmp = 0;
for(i=0;i<256;i++){
　　s[i]=i;
　　k[i]=key[i%Len];
　　}
　　for (i=0; i<256; i++)
　　{
　　j=(j+s[i]+k[i])%256;
　　tmp = s[i];
　　s[i] = s[j]; //交换s[i]和s[j]
　　s[j] = tmp;
}
}
#+end_src
　　在初始化的过程中，密钥的主要功能是将S-box搅乱，i确保S-box的每个元素都得到处理，j保证S-box的搅乱是随机的。而不同的S-box在经过伪随机子密码生成算法的处理后可以得到不同的子密钥序列，将S-box和明文进行xor运算，得到密文，解密过程也完全相同。
　　再来看看算法的加密部分（用C代码表示）：
　　其中，参数1是上边rc4_init函数中，被搅乱的S-box;
　　参数2是需要加密的数据data;
　　参数3是data的长度.
　　void rc4_crypt(unsigned char *s, unsigned char *Data, unsigned long Len)
　　{
　　int x = 0, y = 0, t = 0, i = 0;
　　unsigned char tmp;
　　for(i=0;i<Len;i++)
　　{
　　x=(x+1)%256;
　　y=(y+s[x])%256;
　　tmp = s[x];
　　s[x] = s[y]; //交换s[x]和s[y]
　　s[y] = tmp;
　　t=(s[x]+s[y])%256;
　　Data[i] ^= s[t];
　　}
　　}
　　最后，在main函数中，调用顺序如下：
　　void main()
　　{
　　unsigned char s[256] = {0};//S-box
　　char key[256] = {"just for test"};
　　char pData[512] = "这是一个用来加密的数据Data";
　　ULONG len = strlen(pData);
　　printf("pData = %s\n",pData);
　　printf("key = %s, length = %d\n",key,strlen(key));
　　rc4_init(s,(unsigned char *)key,strlen(key));//初始化
　　rc4_crypt(s,(unsigned char *)pData,len);//加密
　　printf("pData = %s\n\n",pData);
　　rc4_crypt(s,(unsigned char *)pData,len);//解密
　　printf("pData = %s\n\n",pData);
　　}
　　因此最终的完整程序是：
　　//程序开始
　　#include<stdio.h>
　　#include<string.h>
　　typedef unsigned long ULONG;
　　void rc4_init(unsigned char *s, unsigned char *key, unsigned long Len) //初始化函数
　　{
　　int i =0, j = 0；
　　char k[256] = {0};
　　unsigned char tmp = 0;
　　for(i=0;i<256;i++)
　　{
　　s[i]=i;
　　k[i]=key[i%Len];
　　}
　　for (i=0; i<256; i++)
　　{
　　j=(j+s[i]+k[i])%256;
　　tmp = s[i];
　　s[i] = s[j]; //交换s[i]和s[j]
　　s[j] = tmp;
　　}
　　}
　　void rc4_crypt(unsigned char *s, unsigned char *Data, unsigned long Len) //加解密
　　{
　　int i = 0, j = 0, t = 0;
　　unsigned long k = 0;
　　unsigned char tmp;
　　for(k=0;k<Len;k++)
　　{
　　i=(i+1)%256;
　　j=(j+s[i])%256;
　　tmp = s[i];
　　s[i] = s[j]; //交换s[x]和s[y]
　　s[j] = tmp;
　　t=(s[i]+s[j])%256;
　　Data[k] ^= s[t];
　　}
　　}
　　void main()
　　{
　　unsigned char s[256] = {0},s2[256] = {0}; //S-box
　　char key[256] = {"just for test"};
　　char pData[512] = "这是一个用来加密的数据Data";
　　ULONG len = strlen(pData);
　　printf("pData = %s\n",pData);
　　printf("key = %s, length = %d\n\n",key,strlen(key));
　　rc4_init(s,(unsigned char *)key,strlen(key)); //已经完成了初始化
　　printf("完成对S[i]的初始化，如下：\n\n");
　　for (int i=0; i<256; i++)
　　{
　　printf("%-3d ",s[i]);
　　}
　　printf("\n\n");
　　for(i=0;i<256;i++)//用s2[i]暂时保留经过初始化的s[i]，很重要的！！！
　　{
　　s2[i]=s[i];
　　}
　　printf("已经初始化，现在加密:\n\n");
　　rc4_crypt(s,(unsigned char *)pData,len);//加密
　　printf("pData = %s\n\n",pData);
　　printf("已经加密，现在解密:\n\n");
　　rc4_init(s,(unsigned char *)key, strlen(key)); //初始化密钥
　　rc4_crypt(s2,(unsigned char *)pData,len);//解密
　　printf("pData = %s\n\n",pData);
　　}
　　//程序完
* TODO 整理凭证操作流程的文档
