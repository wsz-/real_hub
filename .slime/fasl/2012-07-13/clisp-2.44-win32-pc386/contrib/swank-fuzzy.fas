(|SYSTEM|::|VERSION| '(20060802.))
#0Y |CHARSET|::|UTF-8|
#Y(#:|1 11 (IN-PACKAGE :SWANK)-1|
   #17Y(00 00 00 00 00 00 00 00 00 01 DA 31 E6 0F 01 19 01)
   ("SWANK" |COMMON-LISP|::|*PACKAGE*|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|13 15 (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (SWANK-REQUIRE :SWANK-UTIL) ...)-2-1|
   #16Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 3E 19 01)
   (:|SWANK-UTIL| |SWANK|::|SWANK-REQUIRE|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|13 15 (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (SWANK-REQUIRE :SWANK-UTIL) ...)-2-2|
   #15Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 19 01)
   (:|SWANK-C-P-C| |SWANK|::|SWANK-REQUIRE|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|17 74 (DEFSLIMEFUN FUZZY-COMPLETIONS (STRING DEFAULT-PACKAGE-NAME &KEY ...) ...)-3-1|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 3E 19 01)
   (|SWANK|::|FUZZY-COMPLETIONS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|FUZZY-COMPLETIONS|
       #54Y(00 00 00 00 02 00 00 00 86 1D 02 00 00 00 3D 02 3D 01 9E 59 1C 03
            AD 32 92 14 92 00 16 9F 14 B2 B2 DA B3 DB B1 2D 06 02 42 02 AD DD
            72 2B AD 61 02 19 09 00 1B 68)
       (:|LIMIT| :|TIME-LIMIT-IN-MSEC| |SWANK|::|FUZZY-COMPLETION-SET|
        |COMMON-LISP|::|LIST|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|STRING| |SWANK|::|DEFAULT-PACKAGE-NAME|
        |COMMON-LISP|::|&KEY| |SWANK|::|LIMIT| |SWANK|::|TIME-LIMIT-IN-MSEC|)
       "Returns a list of two values:

  An (optionally limited to LIMIT best results) list of fuzzy
  completions for a symbol designator STRING. The list will be
  sorted by score, most likely match first.

  A flag that indicates whether or not TIME-LIMIT-IN-MSEC has
  been exhausted during computation. If that parameter's value is
  NIL or 0, no time limit is assumed.

The main result is a list of completion objects, where a completion
object is:

    (COMPLETED-STRING SCORE (&rest CHUNKS) CLASSIFICATION-STRING)

where a CHUNK is a description of a matched substring:

    (OFFSET SUBSTRING)

and FLAGS is short string describing properties of the symbol (see
SYMBOL-CLASSIFICATION-STRING).

E.g., completing \"mvb\" in a package that uses COMMON-LISP would
return something like:

    ((\"multiple-value-bind\" 26.588236 ((0 \"m\") (9 \"v\") (15 \"b\"))
     (:FBOUNDP :MACRO))
     ...)

If STRING is package qualified the result list will also be
qualified.  If string is non-qualified the result strings are
also not qualified and are considered relative to
DEFAULT-PACKAGE-NAME.

Which symbols are candidates for matching depends on the symbol
designator's format. The cases are as follows:
  FOO      - Symbols accessible in the buffer package.
  PKG:FOO  - Symbols external in package PKG.
  PKG::FOO - Symbols accessible in package PKG."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|17 74 (DEFSLIMEFUN FUZZY-COMPLETIONS (STRING DEFAULT-PACKAGE-NAME &KEY ...) ...)-3-2|
   #18Y(00 00 00 00 00 00 00 00 00 01 DA DA 72 8B 31 D9 19 01)
   (|SWANK|::|FUZZY-COMPLETIONS|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|77 90 (DEFSTRUCT (FUZZY-MATCHING # # ...) SYMBOL ...)-4|
   #744Y(00 00 00 00 00 00 00 00 00 01 00 2B 01 DA DB DC 38 01 72 85 2F 03 5D
         0B 00 00 DA 2F 04 DA DF 32 8A DA 68 01 00 E0 63 E1 E2 6B 09 E4 E5 E6
         E7 E8 64 E9 EA EB 01 02 6F 12 70 13 EE EF F0 F1 F2 63 6E 11 19 6B 09
         E4 F4 E6 F5 E8 64 E9 EA EB 01 02 6F 12 70 13 EE F6 F0 F7 F2 63 6E 11
         19 6B 09 E4 65 1E E6 65 1F E8 64 E9 EA EB 01 02 6F 12 70 13 EE 65 20
         F0 65 21 F2 63 6E 11 19 6B 09 E4 65 22 E6 65 23 E8 64 E9 EA EB 01 02
         6F 12 70 13 EE 65 24 F0 65 25 F2 63 6E 11 19 6B 09 E4 65 26 E6 65 27
         E8 64 E9 EA EB 01 02 6F 12 70 13 EE 65 28 F0 65 29 F2 63 6E 11 19 7B
         05 6B 2A E4 E5 E6 E7 E8 64 E9 EA EB 01 02 6F 12 70 13 EE 65 2B 65 2C
         65 2D 65 2E 65 2F 6E 11 30 6B 2A E4 F4 E6 F5 E8 64 E9 EA EB 01 02 6F
         12 70 13 EE 65 31 65 2C 65 32 65 2E 65 33 6E 11 30 6B 2A E4 65 1E E6
         65 1F E8 64 E9 EA EB 01 02 6F 12 70 13 EE 65 34 65 2C 65 35 65 2E 65
         36 6E 11 30 6B 2A E4 65 22 E6 65 23 E8 64 E9 EA EB 01 02 6F 12 70 13
         EE 65 37 65 2C 65 38 65 2E 65 39 6E 11 30 6B 2A E4 65 26 E6 65 27 E8
         64 E9 EA EB 01 02 6F 12 70 13 EE 65 3A 65 2C 65 3B 65 2E 65 3C 6E 11
         30 7B 05 2D 08 3D E0 2F 3E E0 AD 6D 3F 01 32 83 16 01 65 40 31 5A E2
         2F 3E E2 65 41 65 42 32 89 E2 65 43 32 83 65 44 31 5A E1 2F 3E E1 65
         41 65 45 32 89 E1 65 46 32 83 65 47 31 5A 65 48 31 5A 65 49 2F 3E 65
         49 65 41 65 4A 32 89 65 49 65 4B 32 83 65 49 65 4C DA 32 89 65 4D 31
         5A 65 4E 31 5A 65 4F 2F 3E 65 4F 65 41 65 50 32 89 65 4F 65 51 32 83
         65 4F 65 4C DA 32 89 65 52 31 5A 65 53 31 5A 65 54 2F 3E 65 54 65 41
         65 55 32 89 65 54 65 56 32 83 65 54 65 4C DA 32 89 65 57 31 5A 65 58
         31 5A 65 59 2F 3E 65 59 65 41 65 5A 32 89 65 59 65 5B 32 83 65 59 65
         4C DA 32 89 65 5C 31 5A 65 5D 31 5A 65 5E 2F 3E 65 5E 65 41 65 5F 32
         89 65 5E 65 60 32 83 65 5E 65 4C DA 32 89 65 61 31 5A 65 62 31 5A 65
         63 2F 3E 65 63 65 41 65 64 32 89 65 63 65 65 32 83 65 49 65 66 DA 32
         89 65 67 31 5A 65 68 31 5A 65 69 2F 3E 65 69 65 41 65 6A 32 89 65 69
         65 6B 32 83 65 4F 65 66 DA 32 89 65 6C 31 5A 65 6D 31 5A 65 6E 2F 3E
         65 6E 65 41 65 6F 32 89 65 6E 65 70 32 83 65 54 65 66 DA 32 89 65 71
         31 5A 65 72 31 5A 65 73 2F 3E 65 73 65 41 65 74 32 89 65 73 65 75 32
         83 65 59 65 66 DA 32 89 65 76 31 5A 65 77 31 5A 65 78 2F 3E 65 78 65
         41 65 79 32 89 65 78 65 7A 32 83 65 5E 65 66 DA 32 89 DA 65 7B 63 2D
         03 7C DA 2F 7D C5 19 01)
   (|SWANK|::|FUZZY-MATCHING| |COMMON-LISP|::|STRUCTURE-OBJECT|
    |CLOS|::|CLOSCLASS| |CLOS|::|CLASS-NAMES|
    |SYSTEM|::|STRUCTURE-UNDEFINE-ACCESSORIES|
    |SYSTEM|::|DEFSTRUCT-DESCRIPTION| |SWANK|::|%MAKE-FUZZY-MATCHING|
    |SWANK|::|COPY-FUZZY-MATCHING| |SWANK|::|FUZZY-MATCHING-P|
    |CLOS|::|<STRUCTURE-EFFECTIVE-SLOT-DEFINITION>| :|NAME|
    |COMMON-LISP|::|SYMBOL| :|INITARGS| (:|SYMBOL|) :|TYPE| :|ALLOCATION|
    :|INSTANCE| |CLOS|::|INHERITABLE-INITER|
    |SYSTEM|::|MAKE-CONSTANT-INITFUNCTION|
    |CLOS|::|MAKE-INHERITABLE-SLOT-DEFINITION-INITER| |CLOS|::|INHERITABLE-DOC|
    (|COMMON-LISP|::|NIL|) |CLOS|::|LOCATION| 1. |CLOS|::|READONLY|
    |CLOS|::|MAKE-INSTANCE-<STRUCTURE-EFFECTIVE-SLOT-DEFINITION>|
    |COMMON-LISP|::|PACKAGE-NAME| (:|PACKAGE-NAME|) (|COMMON-LISP|::|NIL|) 2.
    |SWANK|::|SCORE| (:|SCORE|) (|COMMON-LISP|::|NIL|) 3.
    |SWANK|::|PACKAGE-CHUNKS| (:|PACKAGE-CHUNKS|) (|COMMON-LISP|::|NIL|) 4.
    |SWANK|::|SYMBOL-CHUNKS| (:|SYMBOL-CHUNKS|) (|COMMON-LISP|::|NIL|) 5.
    |CLOS|::|<STRUCTURE-DIRECT-SLOT-DEFINITION>| (|COMMON-LISP|::|NIL|)
    :|READERS| (|SWANK|::|FUZZY-MATCHING.SYMBOL|) :|WRITERS|
    ((|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SYMBOL|))
    |CLOS|::|MAKE-INSTANCE-<STRUCTURE-DIRECT-SLOT-DEFINITION>|
    (|COMMON-LISP|::|NIL|) (|SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|)
    ((|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|))
    (|COMMON-LISP|::|NIL|) (|SWANK|::|FUZZY-MATCHING.SCORE|)
    ((|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SCORE|))
    (|COMMON-LISP|::|NIL|) (|SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|)
    ((|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|))
    (|COMMON-LISP|::|NIL|) (|SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|)
    ((|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|))
    |CLOS|::|DEFINE-STRUCTURE-CLASS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|%MAKE-FUZZY-MATCHING|
       #63Y(00 00 00 00 00 00 00 00 86 1B 05 00 01 00 3D 05 3D 04 3D 03 3D 02
            3D 01 69 00 01 E0 72 31 E1 AD E2 B5 32 30 E1 AD E3 B4 32 30 E1 AD
            E4 B3 32 30 E1 AD E5 B2 32 30 E1 AD E6 B1 32 30 15 19 06)
       (|COMMON-LISP|::|NIL| :|SYMBOL| :|PACKAGE-NAME| :|SCORE|
        :|PACKAGE-CHUNKS| :|SYMBOL-CHUNKS| 6. |SWANK|::|FUZZY-MATCHING| 1. 2.
        3. 4. 5.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|&KEY| (#:|SYMBOL| |COMMON-LISP|::|NIL|)
        (#:|PACKAGE-NAME| |COMMON-LISP|::|NIL|)
        (#:|SCORE| |COMMON-LISP|::|NIL|)
        (#:|PACKAGE-CHUNKS| |COMMON-LISP|::|NIL|)
        (#:|SYMBOL-CHUNKS| |COMMON-LISP|::|NIL|))
       |COMMON-LISP|::|NIL|)
    (|COMMON-LISP|::|INLINE| |SWANK|::|FUZZY-MATCHING-P|)
    |SYSTEM|::|INLINE-EXPANSION|
    ((|SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN| |SWANK|::|FUZZY-MATCHING-P|))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING-P|
      (|SYSTEM|::|%STRUCTURE-TYPE-P| '|SWANK|::|FUZZY-MATCHING|
       |SYSTEM|::|OBJECT|)))
    #Y(|SWANK|::|FUZZY-MATCHING-P|
       #16Y(00 00 00 00 01 00 00 00 00 02 DA AE 32 33 19 02)
       (|SWANK|::|FUZZY-MATCHING|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    (|COMMON-LISP|::|INLINE| |SWANK|::|COPY-FUZZY-MATCHING|)
    ((|COMMON-LISP|::|STRUCTURE|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN| |SWANK|::|COPY-FUZZY-MATCHING|))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|COPY-FUZZY-MATCHING|
      (|COMMON-LISP|::|COPY-STRUCTURE| |COMMON-LISP|::|STRUCTURE|)))
    #Y(|SWANK|::|COPY-FUZZY-MATCHING|
       #15Y(00 00 00 00 01 00 00 00 06 02 AD 32 32 19 02) ()
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
       (|COMMON-LISP|::|STRUCTURE|) |COMMON-LISP|::|NIL|)
    (|COMMON-LISP|::|FUNCTION| |SWANK|::|FUZZY-MATCHING.SYMBOL|
     (|SWANK|::|FUZZY-MATCHING|) |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|INLINE| |SWANK|::|FUZZY-MATCHING.SYMBOL|)
    |SWANK|::|FUZZY-MATCHING.SYMBOL|
    ((|SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN| |SWANK|::|FUZZY-MATCHING.SYMBOL|))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING.SYMBOL|
      (|COMMON-LISP|::|THE| |COMMON-LISP|::|T|
       (|SYSTEM|::|%STRUCTURE-REF| '|SWANK|::|FUZZY-MATCHING|
        |SYSTEM|::|OBJECT| 1.))))
    #Y(|SWANK|::|FUZZY-MATCHING.SYMBOL|
       #17Y(00 00 00 00 01 00 00 00 00 02 DA AE DB 32 2F 19 02)
       (|SWANK|::|FUZZY-MATCHING| 1.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    |SYSTEM|::|DEFSTRUCT-READER|
    (|COMMON-LISP|::|FUNCTION| |SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|
     (|SWANK|::|FUZZY-MATCHING|) |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|INLINE| |SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|)
    |SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|
    ((|SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN| |SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|
      (|COMMON-LISP|::|THE| |COMMON-LISP|::|T|
       (|SYSTEM|::|%STRUCTURE-REF| '|SWANK|::|FUZZY-MATCHING|
        |SYSTEM|::|OBJECT| 2.))))
    #Y(|SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|
       #17Y(00 00 00 00 01 00 00 00 00 02 DA AE DB 32 2F 19 02)
       (|SWANK|::|FUZZY-MATCHING| 2.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    (|COMMON-LISP|::|FUNCTION| |SWANK|::|FUZZY-MATCHING.SCORE|
     (|SWANK|::|FUZZY-MATCHING|) |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|INLINE| |SWANK|::|FUZZY-MATCHING.SCORE|)
    |SWANK|::|FUZZY-MATCHING.SCORE|
    ((|SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN| |SWANK|::|FUZZY-MATCHING.SCORE|))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING.SCORE|
      (|COMMON-LISP|::|THE| |COMMON-LISP|::|T|
       (|SYSTEM|::|%STRUCTURE-REF| '|SWANK|::|FUZZY-MATCHING|
        |SYSTEM|::|OBJECT| 3.))))
    #Y(|SWANK|::|FUZZY-MATCHING.SCORE|
       #17Y(00 00 00 00 01 00 00 00 00 02 DA AE DB 32 2F 19 02)
       (|SWANK|::|FUZZY-MATCHING| 3.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    (|COMMON-LISP|::|FUNCTION| |SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|
     (|SWANK|::|FUZZY-MATCHING|) |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|INLINE| |SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|)
    |SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|
    ((|SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN| |SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|
      (|COMMON-LISP|::|THE| |COMMON-LISP|::|T|
       (|SYSTEM|::|%STRUCTURE-REF| '|SWANK|::|FUZZY-MATCHING|
        |SYSTEM|::|OBJECT| 4.))))
    #Y(|SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|
       #17Y(00 00 00 00 01 00 00 00 00 02 DA AE DB 32 2F 19 02)
       (|SWANK|::|FUZZY-MATCHING| 4.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    (|COMMON-LISP|::|FUNCTION| |SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|
     (|SWANK|::|FUZZY-MATCHING|) |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|INLINE| |SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|)
    |SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|
    ((|SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN| |SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|
      (|COMMON-LISP|::|THE| |COMMON-LISP|::|T|
       (|SYSTEM|::|%STRUCTURE-REF| '|SWANK|::|FUZZY-MATCHING|
        |SYSTEM|::|OBJECT| 5.))))
    #Y(|SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|
       #17Y(00 00 00 00 01 00 00 00 00 02 DA AE DB 32 2F 19 02)
       (|SWANK|::|FUZZY-MATCHING| 5.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    (|COMMON-LISP|::|FUNCTION|
     (|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SYMBOL|)
     (|COMMON-LISP|::|T| |SWANK|::|FUZZY-MATCHING|) |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|INLINE|
     (|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SYMBOL|))
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|SWANK|::|FUZZY-MATCHING.SYMBOL|)
    ((|SYSTEM|::|VALUE| |SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN|
       #1=(|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SYMBOL|)))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING.SYMBOL|
      (|SYSTEM|::|%STRUCTURE-STORE| '|SWANK|::|FUZZY-MATCHING|
       |SYSTEM|::|OBJECT| 1. |SYSTEM|::|VALUE|)))
    #Y(#1# #18Y(00 00 00 00 02 00 00 00 00 03 DA AE DB B1 32 30 19 03)
       (|SWANK|::|FUZZY-MATCHING| 1.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
    |SYSTEM|::|DEFSTRUCT-WRITER|
    (|COMMON-LISP|::|FUNCTION|
     (|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|)
     (|COMMON-LISP|::|T| |SWANK|::|FUZZY-MATCHING|) |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|INLINE|
     (|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|))
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|)
    ((|SYSTEM|::|VALUE| |SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN|
       #2=(|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|)))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING.PACKAGE-NAME|
      (|SYSTEM|::|%STRUCTURE-STORE| '|SWANK|::|FUZZY-MATCHING|
       |SYSTEM|::|OBJECT| 2. |SYSTEM|::|VALUE|)))
    #Y(#2# #18Y(00 00 00 00 02 00 00 00 00 03 DA AE DB B1 32 30 19 03)
       (|SWANK|::|FUZZY-MATCHING| 2.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
    (|COMMON-LISP|::|FUNCTION|
     (|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SCORE|)
     (|COMMON-LISP|::|T| |SWANK|::|FUZZY-MATCHING|) |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|INLINE|
     (|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SCORE|))
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|SWANK|::|FUZZY-MATCHING.SCORE|)
    ((|SYSTEM|::|VALUE| |SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN|
       #3=(|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SCORE|)))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING.SCORE|
      (|SYSTEM|::|%STRUCTURE-STORE| '|SWANK|::|FUZZY-MATCHING|
       |SYSTEM|::|OBJECT| 3. |SYSTEM|::|VALUE|)))
    #Y(#3# #18Y(00 00 00 00 02 00 00 00 00 03 DA AE DB B1 32 30 19 03)
       (|SWANK|::|FUZZY-MATCHING| 3.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
    (|COMMON-LISP|::|FUNCTION|
     (|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|)
     (|COMMON-LISP|::|T| |SWANK|::|FUZZY-MATCHING|) |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|INLINE|
     (|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|))
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|)
    ((|SYSTEM|::|VALUE| |SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN|
       #4=(|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|)))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING.PACKAGE-CHUNKS|
      (|SYSTEM|::|%STRUCTURE-STORE| '|SWANK|::|FUZZY-MATCHING|
       |SYSTEM|::|OBJECT| 4. |SYSTEM|::|VALUE|)))
    #Y(#4# #18Y(00 00 00 00 02 00 00 00 00 03 DA AE DB B1 32 30 19 03)
       (|SWANK|::|FUZZY-MATCHING| 4.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
    (|COMMON-LISP|::|FUNCTION|
     (|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|)
     (|COMMON-LISP|::|T| |SWANK|::|FUZZY-MATCHING|) |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|INLINE|
     (|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|))
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|)
    ((|SYSTEM|::|VALUE| |SYSTEM|::|OBJECT|)
     (|COMMON-LISP|::|DECLARE|
      (|SYSTEM|::|IN-DEFUN|
       #5=(|COMMON-LISP|::|SETF| |SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|)))
     (|COMMON-LISP|::|BLOCK| |SWANK|::|FUZZY-MATCHING.SYMBOL-CHUNKS|
      (|SYSTEM|::|%STRUCTURE-STORE| '|SWANK|::|FUZZY-MATCHING|
       |SYSTEM|::|OBJECT| 5. |SYSTEM|::|VALUE|)))
    #Y(#5# #18Y(00 00 00 00 02 00 00 00 00 03 DA AE DB B1 32 30 19 03)
       (|SWANK|::|FUZZY-MATCHING| 5.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
    |COMMON-LISP|::|TYPE| |SYSTEM|::|%SET-DOCUMENTATION|
    |CLOS|::|DEFSTRUCT-REMOVE-PRINT-OBJECT-METHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|90 96 (DEFUN MAKE-FUZZY-MATCHING (SYMBOL PACKAGE-NAME SCORE ...) ...)-5|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|MAKE-FUZZY-MATCHING| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|MAKE-FUZZY-MATCHING|
       #25Y(00 00 00 00 05 00 00 00 06 06 DA B2 DB B3 DC B4 DD B5 DE B6 2D 0A
            05 19 06)
       (:|SYMBOL| :|PACKAGE-NAME| :|SCORE| :|PACKAGE-CHUNKS| :|SYMBOL-CHUNKS|
        |SWANK|::|%MAKE-FUZZY-MATCHING|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|PACKAGE-NAME| |SWANK|::|SCORE|
        |SWANK|::|PACKAGE-CHUNKS| |SWANK|::|SYMBOL-CHUNKS|)
       |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|98 122 (DEFUN %FUZZY-EXTRACT-MATCHING-INFO (FUZZY-MATCHING USER-INPUT-STRING) ...)-6|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|%FUZZY-EXTRACT-MATCHING-INFO| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|%FUZZY-EXTRACT-MATCHING-INFO|
       #94Y(00 00 00 00 02 00 00 00 06 03 AD 63 30 00 42 04 01 03 DB B6 DC 8E
            2F 25 CA FA DB B6 DE 81 2F 01 92 05 37 F8 AE AE 93 07 01 9F 14 B7
            6F 06 B8 6F 07 40 05 19 0A C8 F9 1B 6B 7D 01 1B 67 DB B6 DC 72 2F
            81 8D 02 A0 F8 DB B6 DC 72 2F 8E 8E 66 93 05 67 DB B6 DE 81 2F 01
            1B 4A A0 F8 1B 46)
       (|SWANK|::|PARSE-COMPLETION-ARGUMENTS| |SWANK|::|FUZZY-MATCHING| 1. ""
        2. "" |SWANK|::|COMPLETION-OUTPUT-SYMBOL-CONVERTER|
        |SWANK|::|COMPLETION-OUTPUT-PACKAGE-CONVERTER|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|FUZZY-MATCHING| |SWANK|::|USER-INPUT-STRING|)
       |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|124 132 (DEFUN FUZZY-FORMAT-MATCHING (FUZZY-MATCHING USER-INPUT-STRING) ...)-7|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|FUZZY-FORMAT-MATCHING| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|FUZZY-FORMAT-MATCHING|
       #49Y(00 00 00 00 02 00 00 00 06 03 AE AE 30 00 42 05 93 04 04 AD B1 36
            01 FC 93 03 04 AC B0 36 01 FB 14 AF B2 6E 03 01 AC B2 AE 38 08 72
            67 40 02 19 09)
       (|SWANK|::|%FUZZY-EXTRACT-MATCHING-INFO| |SWANK|::|UNTOKENIZE-SYMBOL|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|FUZZY-MATCHING| |SWANK|::|USER-INPUT-STRING|)
       "Returns the completion (\"foo:bar\") that's represented by FUZZY-MATCHING."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|134 152 (DEFUN FUZZY-CONVERT-MATCHING-FOR-EMACS (FUZZY-MATCHING USER-INPUT-STRING) ...)-8|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|FUZZY-CONVERT-MATCHING-FOR-EMACS|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|FUZZY-CONVERT-MATCHING-FOR-EMACS|
       #103Y(00 00 00 00 02 00 00 00 06 03 AE AE 30 00 42 02 AD 38 02 72 76 DB
             B3 DC 72 2F AD 01 03 DD 01 03 B4 2D 09 04 16 01 AC 81 77 00 DB B3
             DF 72 2F 63 DB B5 E0 72 2F 1B 18 94 00 94 00 9E 5C 78 B4 AE 73 02
             35 AD 61 02 16 01 F8 84 02 16 01 83 00 AC 8D 94 64 16 01 AC 80 A6
             00 73 02 22 DB B4 E1 72 2F 6F 08 61 04 19 05)
       (|SWANK|::|FUZZY-FORMAT-MATCHING| |SWANK|::|FUZZY-MATCHING| 3. 2.
        |SYSTEM|::|DO-FORMAT-FIXED-FLOAT| 4. 5. 1.
        |SWANK|::|SYMBOL-CLASSIFICATION-STRING|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|FUZZY-MATCHING| |SWANK|::|USER-INPUT-STRING|)
       "Converts a result from the fuzzy completion core into something
that emacs is expecting.  Converts symbols to strings, fixes case
issues, and adds information (as a string) describing if the symbol is
bound, fbound, a class, a macro, a generic-function, a
special-operator, or a package."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|154 174 (DEFUN FUZZY-COMPLETION-SET (STRING DEFAULT-PACKAGE-NAME &KEY ...) ...)-9|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|FUZZY-COMPLETION-SET| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|FUZZY-COMPLETION-SET|
       #186Y(00 00 00 00 02 00 00 00 86 1D 02 00 00 00 00 2B 03 7F 05 00 00 3B
             03 01 00 0B 00 01 3B 02 0A 00 0B 00 02 1B 07 16 01 1B 3E 0B 00 02
             68 00 01 93 00 73 AC 8F 0E 0A AC 8E 94 06 DC AD 90 01 32 65 DD AD
             AF 6D 04 01 DF 63 E0 2D 06 07 16 01 1B 5C AD 68 03 01 31 19 1B 80
             52 E2 AD AF 6D 09 01 DF 63 E4 2D 06 07 16 01 68 00 02 93 00 0E AC
             8F 0E 68 AC 8E 94 64 DC AD 91 01 32 5E 16 01 68 00 00 B1 68 02 02
             2D 03 0B 42 02 06 02 01 1D 1D 14 8F 93 19 68 02 01 AE 72 48 91 01
             2F 0F AD 8C 17 FF AF 68 02 01 38 07 A6 F9 80 1D 01 AD AF 6D 0C 01
             AF 2D 03 0D AD AD 40 02 19 08)
       (:|LIMIT| :|TIME-LIMIT-IN-MSEC| 16777214. |SWANK|::|LIMIT|
        #Y(|SWANK|::|FUZZY-COMPLETION-SET-1|
           #16Y(00 00 00 00 01 00 00 00 00 02 9E 0C 00 02 19 02)
           (|COMMON-LISP|::|NIL|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        1.
        (|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL|
         (|COMMON-LISP|::|INTEGER| 0. 16777214.))
        |SYSTEM|::|CHECK-TYPE-FAILED| |SWANK|::|TIME-LIMIT-IN-MSEC|
        #Y(|SWANK|::|FUZZY-COMPLETION-SET-2|
           #16Y(00 00 00 00 01 00 00 00 00 02 9E 0C 00 03 19 02)
           (|COMMON-LISP|::|NIL|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        (|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL|
         (|COMMON-LISP|::|INTEGER| 0. 16777214.))
        |SWANK|::|FUZZY-GENERATE-MATCHINGS|
        #Y(|SWANK|::|FUZZY-COMPLETION-SET-3|
           #18Y(00 00 00 00 01 00 00 00 06 02 AD 69 00 01 30 01 19 02)
           (|COMMON-LISP|::|NIL| |SWANK|::|FUZZY-CONVERT-MATCHING-FOR-EMACS|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|M|) |COMMON-LISP|::|NIL|)
        |COMMON-LISP|::|MAP-INTO|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|STRING| |SWANK|::|DEFAULT-PACKAGE-NAME|
        |COMMON-LISP|::|&KEY| |SWANK|::|LIMIT| |SWANK|::|TIME-LIMIT-IN-MSEC|)
       "Returns two values: an array of completion objects, sorted by
their score, that is how well they are a match for STRING
according to the fuzzy completion algorithm.  If LIMIT is set,
only the top LIMIT results will be returned. Additionally, a flag
is returned that indicates whether or not TIME-LIMIT-IN-MSEC was
exhausted."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|177 257 (DEFUN FUZZY-GENERATE-MATCHINGS (STRING DEFAULT-PACKAGE-NAME TIME-LIMIT-IN-MSEC) ...)-10|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|FUZZY-GENERATE-MATCHINGS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|FUZZY-GENERATE-MATCHINGS|
       #230Y(00 00 00 00 03 00 00 00 06 04 AF AF 30 00 42 04 00 2B 02 7F 04 00
             00 7F 01 00 01 AC 6D 01 01 AD 6D 02 01 B4 01 03 92 09 1E 68 06 00
             B0 C8 34 42 02 6A 04 6A 01 68 06 00 B5 B1 38 01 A5 34 42 02 6A 04
             6A 02 1B 80 83 B5 DE 38 04 8C 35 67 B5 B9 C8 34 42 02 AD 99 05 38
             03 81 68 01 E0 01 02 1B 0B A1 FE 16 05 1B 80 62 16 03 85 02 AE B1
             72 48 90 01 32 80 48 B0 AF 82 01 01 01 E1 AE E2 72 2F 80 CE 00 93
             08 04 AF 8F 93 33 68 0B 00 AD B1 B0 B4 38 07 72 4F 6F 09 AA 34 42
             02 AD B0 AB 34 F9 E4 B6 AF 82 02 25 09 9D FD B5 72 48 6F 0B B2 AD
             91 01 31 FF B3 B2 AD 82 01 36 06 16 03 A0 09 08 68 0B 00 E6 8E 04
             FF 99 16 05 E4 AF AF 82 02 25 00 14 99 05 38 03 81 68 00 14 93 04
             04 14 32 93 59 14 40 02 19 0F)
       (|SWANK|::|PARSE-COMPLETION-ARGUMENTS|
        #Y(|SWANK|::|FUZZY-GENERATE-MATCHINGS-FIX-UP|
           #48Y(00 00 00 00 02 00 00 00 06 03 2A 2B 03 DB AF DC 32 2F 0B 00 00
                DB AF DD 32 2F 0B 00 01 DB AF DE 32 2F 0B 00 02 AF AD 6D 05 01
                B1 2D 03 06 19 04)
           (|COMMON-LISP|::|NIL| |SWANK|::|FUZZY-MATCHING| 2. 3. 4.
            #Y(|SWANK|::|FUZZY-GENERATE-MATCHINGS-FIX-UP-1|
               #72Y(00 00 00 00 01 00 00 00 06 02 DB AE DC 72 2F 69 00 01 DB B0
                    DD AF 32 30 16 01 69 00 03 DB B0 DE AF 32 30 16 01 69 01 01
                    DF 8E 04 13 69 00 02 AD 33 02 35 14 DB B0 DC AF 32 30 16 01
                    9F 19 03 E0 69 00 02 33 02 37 1B 6B)
               (|COMMON-LISP|::|NIL| |SWANK|::|FUZZY-MATCHING| 3. 2. 4. ""
                #10r1/100)
               (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
               (|SWANK|::|M|) |COMMON-LISP|::|NIL|)
            |COMMON-LISP|::|MAP-INTO|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|MATCHINGS| |SWANK|::|PARENT-PACKAGE-MATCHING|)
           |COMMON-LISP|::|NIL|)
        #Y(|SWANK|::|FUZZY-GENERATE-MATCHINGS-FIND-SYMBOLS|
           #33Y(00 00 00 00 03 00 01 00 06 0A 3D 01 B0 B0 DB B1 DC 07 00 02 59
                14 DD 92 08 01 C9 14 2D 08 05 19 05)
           (|COMMON-LISP|::|NIL| :|TIME-LIMIT-IN-MSEC| :|EXTERNAL-ONLY|
            :|FILTER| #.#'|COMMON-LISP|::|IDENTITY|
            |SWANK|::|FUZZY-FIND-MATCHING-SYMBOLS|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|DESIGNATOR| |COMMON-LISP|::|PACKAGE|
            |SWANK|::|TIME-LIMIT| |COMMON-LISP|::|&OPTIONAL| |SWANK|::|FILTER|)
           |COMMON-LISP|::|NIL|)
        #Y(|SWANK|::|FUZZY-GENERATE-MATCHINGS-FIND-PACKAGES|
           #18Y(00 00 00 00 02 00 00 00 06 03 AE DA AF 2D 03 01 19 03)
           (:|TIME-LIMIT-IN-MSEC| |SWANK|::|FUZZY-FIND-MATCHING-PACKAGES|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|DESIGNATOR| |SWANK|::|TIME-LIMIT|) |COMMON-LISP|::|NIL|)
        "" |SWANK|::|FUZZY-MATCHING-GREATERP| 0. |SWANK|::|FUZZY-MATCHING| 2.
        |SWANK|::|%MAKE-DUPLICATE-SYMBOLS-FILTER| |COMMON-LISP|::|VECTOR|
        |SWANK|::|%GUESS-SORT-DURATION| "")
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|STRING| |SWANK|::|DEFAULT-PACKAGE-NAME|
        |SWANK|::|TIME-LIMIT-IN-MSEC|)
       "Does all the hard work for FUZZY-COMPLETION-SET. If
TIME-LIMIT-IN-MSEC is NIL, an infinite time limit is assumed."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|259 267 (DEFUN %GUESS-SORT-DURATION (LENGTH) ...)-11|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|%GUESS-SORT-DURATION| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|%GUESS-SORT-DURATION|
       #43Y(00 00 00 00 01 00 00 00 06 02 AD 8E 92 1A DB AE AF DC 72 9C 73 02
            37 73 02 37 DD AD DE DF 72 9B 73 02 37 33 02 37 19 03 C5 19 02)
       (0. 3.8f0 2. 1000. 10. -7.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
       (|COMMON-LISP|::|LENGTH|) |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|267 277 (DEFUN %MAKE-DUPLICATE-SYMBOLS-FILTER (FUZZY-PACKAGE-MATCHINGS) ...)-12|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|%MAKE-DUPLICATE-SYMBOLS-FILTER|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|%MAKE-DUPLICATE-SYMBOLS-FILTER|
       #55Y(00 00 00 00 01 00 00 00 06 02 00 2B 01 63 AF DA 72 2B 1B 0F 94 00
            DB AD DC 72 2F 71 CE 84 02 16 01 83 00 AC 8D 94 6D 16 01 AC 31 A6
            16 01 0B 00 00 AC 2C 03 01 19 03)
       (|COMMON-LISP|::|LIST| |SWANK|::|FUZZY-MATCHING| 2.
        #Y(|SWANK|::|%MAKE-DUPLICATE-SYMBOLS-FILTER-1|
           #23Y(00 00 00 00 01 00 00 00 06 02 AD 72 8B 69 00 01 38 03 31 B6 59
                19 02)
           (|COMMON-LISP|::|NIL|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|COMMON-LISP|::|SYMBOL|) |COMMON-LISP|::|NIL|))
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|FUZZY-PACKAGE-MATCHINGS|) |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|279 292 (DEFUN FUZZY-MATCHING-GREATERP (M1 M2) ...)-13|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|FUZZY-MATCHING-GREATERP| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|FUZZY-MATCHING-GREATERP|
       #60Y(00 00 00 00 02 00 00 00 06 03 DA AF DB 72 2F DA AF DB 72 2F AD AD
            90 01 30 1C AD AD 90 01 2F 19 DA B1 DC 72 2F 72 8D DA B1 DC 72 2F
            72 8D AD AD 38 04 31 37 19 07 02 19 05 00 19 05)
       (|SWANK|::|FUZZY-MATCHING| 3. 1.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
       (|SWANK|::|M1| |SWANK|::|M2|)
       "Returns T if fuzzy-matching M1 should be sorted before M2.
Basically just the scores of the two matchings are compared, and
the match with higher score wins. For the case that the score is
equal, the one which comes alphabetically first wins."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|294 294 (DECLAIM (FTYPE # GET-REAL-TIME-MSECS))-14|
   #15Y(00 00 00 00 00 00 00 00 00 01 DA 31 5A 19 01)
   ((|COMMON-LISP|::|FTYPE|
     (|COMMON-LISP|::|FUNCTION| |COMMON-LISP|::|NIL|
      (|COMMON-LISP|::|INTEGER| 0.))
     |SWANK|::|GET-REAL-TIME-MSECS|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|295 297 (DEFUN GET-REAL-TIME-IN-MSECS NIL ...)-15|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|GET-REAL-TIME-IN-MSECS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|GET-REAL-TIME-IN-MSECS|
       #26Y(00 00 00 00 00 00 00 00 06 01 DA DB DC 72 B4 73 01 33 71 CA AD 32
            B4 3F 19 02)
       (1. #.|COMMON-LISP|::|INTERNAL-TIME-UNITS-PER-SECOND| 1000.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|) ()
       |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|297 353 (DEFUN FUZZY-FIND-MATCHING-SYMBOLS (STRING PACKAGE &KEY ...) ...)-16|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|FUZZY-FIND-MATCHING-SYMBOLS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|FUZZY-FIND-MATCHING-SYMBOLS|
       #144Y(02 00 01 00 02 00 00 00 86 1D 03 00 00 00 00 2B 04 7F 06 00 00 7F
             05 00 01 3B 04 01 C8 0B 00 02 3B 03 01 00 0B 00 03 3D 02 9D 2B 05
             93 03 01 02 0B 00 00 92 03 01 C9 0B 00 01 2E 05 0B 00 02 68 01 01
             31 CF 0B 00 03 C9 0B 00 04 9D 2B 01 AD 2C 06 01 0B 00 00 9D 2B 02
             E1 64 38 06 C9 FA 31 1D 0B 00 00 06 02 01 0B 00 01 47 08 1A A0 2B
             01 38 09 CE FB 31 64 0B 00 00 68 07 01 AD B1 6D 0A 02 AD 31 E3 16
             02 48 68 00 00 68 01 01 40 02 19 0A)
       (:|FILTER| :|EXTERNAL-ONLY| :|TIME-LIMIT-IN-MSEC|
        #.#'|COMMON-LISP|::|IDENTITY| 0. |SWANK|::|GET-REAL-TIME-IN-MSECS|
        #Y(|SWANK|::|FUZZY-FIND-MATCHING-SYMBOLS-RECOMPUTE-REMAINING-TIME|
           #69Y(00 00 00 00 01 00 00 00 06 02 07 00 01 1D 18 69 00 05 8F 93 16
                69 00 05 72 97 DB 32 B8 0C 00 05 63 9F 14 40 02 19 02 63 00 1B
                77 2E 02 14 69 00 03 73 01 36 69 00 02 AD 73 01 36 AC 32 93 59
                14 AD 40 02 19 04)
           (|COMMON-LISP|::|NIL| 128. |SWANK|::|GET-REAL-TIME-IN-MSECS|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|OLD-REMAINING-TIME|) |COMMON-LISP|::|NIL|)
        256. |COMMON-LISP|::|LOOP| #.#'|COMMON-LISP|::|EQ|
        #Y(|SWANK|::|FUZZY-FIND-MATCHING-SYMBOLS-1|
           #142Y(00 00 00 00 01 00 00 00 06 02 AD 69 00 01 38 01 8C 65 30 69 00
                 01 AE AD 64 31 66 16 01 69 01 02 07 02 01 34 42 02 9D 0C 01 02
                 92 01 19 07 04 04 1D 07 AF 69 04 02 8B 02 08 69 04 03 B0 36 01
                 1C 32 16 02 00 19 02 3E 49 01 AF 69 03 04 DE 01 02 6E 05 05 69
                 01 01 38 01 31 1C 16 02 1B 65 B1 69 03 04 AE 63 B1 6E 05 05 69
                 01 01 38 01 31 1C 16 04 1B 50 DD 69 04 01 38 04 8C 35 4D 69 04
                 01 B0 72 8D CB 34 42 02 92 01 55 16 04 1B FF B5)
           (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
            |SWANK|::|SYMBOL-EXTERNAL-P| "" 0.0f0
            |SWANK|::|MAKE-FUZZY-MATCHING|
            #Y(|SWANK|::|FUZZY-FIND-MATCHING-SYMBOLS-PERFORM-FUZZY-MATCH|
               #23Y(00 00 00 00 02 00 00 00 06 03 AE 6F 00 AC AF 76 01 B0 AD 30
                    01 19 05)
               (|SWANK|::|COMPLETION-OUTPUT-SYMBOL-CONVERTER|
                |SWANK|::|COMPUTE-HIGHEST-SCORING-COMPLETION|)
               (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
               (|COMMON-LISP|::|STRING| |COMMON-LISP|::|SYMBOL-NAME|)
               |COMMON-LISP|::|NIL|))
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|COMMON-LISP|::|SYMBOL|) |COMMON-LISP|::|NIL|))
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|STRING| |COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|&KEY|
        (|SWANK|::|FILTER| #'|COMMON-LISP|::|IDENTITY|)
        |SWANK|::|EXTERNAL-ONLY| |SWANK|::|TIME-LIMIT-IN-MSEC|)
       "Returns two values: a vector of fuzzy matchings for matching
symbols in PACKAGE, using the fuzzy completion algorithm, and the
remaining time limit.

Only those symbols are considered of which FILTER does return T.

If EXTERNAL-ONLY is true, only external symbols are considered. A
TIME-LIMIT-IN-MSEC of NIL is considered no limit; if it's zero or
negative, perform a NOP."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|356 394 (DEFUN FUZZY-FIND-MATCHING-PACKAGES (NAME &KEY TIME-LIMIT-IN-MSEC) ...)-17|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|FUZZY-FIND-MATCHING-PACKAGES| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|FUZZY-FIND-MATCHING-PACKAGES|
       #169Y(00 00 00 00 01 00 00 00 86 1C 01 00 00 00 3B 01 0D 7D 01 93 01 0C
             1B 09 DF B0 40 02 19 08 93 01 01 02 14 92 02 01 C6 14 2E 02 14 B1
             6F 03 DE 64 38 06 C6 FA 71 1D 93 04 04 AF 8F 93 5B 71 D5 63 1B 80
             4A 87 01 00 E0 63 DB AF 6F 07 01 02 1B 32 63 B2 B1 B3 63 6E 05 09
             B5 38 01 31 1C 16 06 1B 2A 87 02 01 B5 AE 36 01 F8 BB AD 30 08 42
             02 93 01 0C AC B2 91 01 30 06 A0 FF 9E FE 9D FD 16 02 83 02 AE 8D
             94 5B 92 04 47 16 06 83 01 AD 8D 94 FF B1 AE 93 07 0E 2E 02 14 B2
             73 01 36 B3 AD 33 01 36 16 01 14 40 02 19 0A)
       (:|TIME-LIMIT-IN-MSEC| 0. |SWANK|::|GET-REAL-TIME-IN-MSECS|
        |SWANK|::|COMPLETION-OUTPUT-PACKAGE-CONVERTER| 32. #() ""
        |SWANK|::|PACKAGE-NAMES| |SWANK|::|COMPUTE-HIGHEST-SCORING-COMPLETION|
        |SWANK|::|MAKE-FUZZY-MATCHING|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|NAME| |COMMON-LISP|::|&KEY| |SWANK|::|TIME-LIMIT-IN-MSEC|)
       "Returns a vector of fuzzy matchings for each package that is
similiar to NAME, and the remaining time limit. 
Cf. FUZZY-FIND-MATCHING-SYMBOLS."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|397 408 (DEFSLIMEFUN FUZZY-COMPLETION-SELECTED (ORIGINAL-STRING COMPLETION) ...)-18-1|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 3E 19 01)
   (|SWANK|::|FUZZY-COMPLETION-SELECTED| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|FUZZY-COMPLETION-SELECTED|
       #13Y(00 00 00 00 02 00 00 00 06 03 00 19 03) ()
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
       (|SWANK|::|ORIGINAL-STRING| |SWANK|::|COMPLETION|)
       "This function is called by Slime when a fuzzy completion is
selected by the user.  It is for future expansion to make
testing, say, a machine learning algorithm for completion scoring
easier.

ORIGINAL-STRING is the string the user completed from, and
COMPLETION is the completion object (see docstring for
SWANK:FUZZY-COMPLETIONS) corresponding to the completion that the
user selected."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|397 408 (DEFSLIMEFUN FUZZY-COMPLETION-SELECTED (ORIGINAL-STRING COMPLETION) ...)-18-2|
   #18Y(00 00 00 00 00 00 00 00 00 01 DA DA 72 8B 31 D9 19 01)
   (|SWANK|::|FUZZY-COMPLETION-SELECTED|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|411 421 (DEFPARAMETER *FUZZY-RECURSION-SOFT-LIMIT* 30 ...)-19|
   #26Y(00 00 00 00 00 00 00 00 00 01 DA 31 5A DB DC 31 52 DB DD DE 2D 03 05 C6
        19 01)
   ((|COMMON-LISP|::|SPECIAL| |SWANK|::|*FUZZY-RECURSION-SOFT-LIMIT*|)
    |SWANK|::|*FUZZY-RECURSION-SOFT-LIMIT*| 30. |COMMON-LISP|::|VARIABLE|
    "This is a soft limit for recursion in
RECURSIVELY-COMPUTE-MOST-COMPLETIONS.  Without this limit,
completing a string such as \"ZZZZZZ\" with a symbol named
\"ZZZZZZZZZZZZZZZZZZZZZZZ\" will result in explosive recursion to
find all the ways it can match.

Most natural language searches and symbols do not have this
problem -- this is only here as a safeguard."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|422 422 (DECLAIM (FIXNUM *FUZZY-RECURSION-SOFT-LIMIT*))-20|
   #15Y(00 00 00 00 00 00 00 00 00 01 DA 31 5A 19 01)
   ((|COMMON-LISP|::|FIXNUM| |SWANK|::|*FUZZY-RECURSION-SOFT-LIMIT*|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|424 434 (DEFUN COMPUTE-HIGHEST-SCORING-COMPLETION (SHORT FULL) ...)-21|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|COMPUTE-HIGHEST-SCORING-COMPLETION|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|COMPUTE-HIGHEST-SCORING-COMPLETION|
       #59Y(00 00 00 00 02 00 00 00 06 03 63 AF AF 70 00 1B 10 94 00 AC B2 B2
            6E 03 01 9E 7A 84 02 16 01 83 00 AC 8D 94 6C 16 01 AC 80 A6 00 AC
            DC DD 38 02 32 68 78 95 00 94 01 40 02 19 05)
       (|SWANK|::|COMPUTE-MOST-COMPLETIONS| |SWANK|::|SCORE-COMPLETION|
        #.#'|COMMON-LISP|::|>| #.#'|COMMON-LISP|::|FIRST|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|SHORT| |SWANK|::|FULL|)
       "Finds the highest scoring way to complete the abbreviation
SHORT onto the string FULL, using CHAR= as a equality function for
letters.  Returns two values:  The first being the completion
chunks of the highest scorer, and the second being the score."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|436 444 (DEFUN COMPUTE-MOST-COMPLETIONS (SHORT FULL) ...)-22|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|COMPUTE-MOST-COMPLETIONS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|COMPUTE-MOST-COMPLETIONS|
       #28Y(00 00 00 00 02 00 00 00 06 03 00 10 00 B1 B1 DB DB 01 03 64 2D 08
            02 0E 00 11 19 03)
       (|SWANK|::|*ALL-CHUNKS*| 0.
        |SWANK|::|RECURSIVELY-COMPUTE-MOST-COMPLETIONS|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|SHORT| |SWANK|::|FULL|)
       "Finds most possible ways to complete FULL with the letters in SHORT.
Calls RECURSIVELY-COMPUTE-MOST-COMPLETIONS recursively.  Returns
a list of (&rest CHUNKS), where each CHUNKS is a description of
how a completion matches."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|446 524 (DEFUN RECURSIVELY-COMPUTE-MOST-COMPLETIONS (SHORT FULL SHORT-INDEX ...) ...)-23|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|RECURSIVELY-COMPUTE-MOST-COMPLETIONS|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|RECURSIVELY-COMPUTE-MOST-COMPLETIONS|
       #161Y(00 00 00 00 08 00 00 00 06 00 00 2B 05 7F 09 00 00 7F 07 00 01 7F
             05 00 02 7F 04 00 03 7F 03 00 04 AC 6D 00 01 AD 6D 01 01 AE 6D 02
             01 06 03 03 1D 02 9D 34 B5 1B 80 4B 93 07 20 68 05 00 BA 68 07 01
             96 04 68 09 02 68 0A 03 68 0B 04 6B 03 72 48 6B 04 33 01 30 59 14
             28 FF AF 68 05 01 32 97 0B 05 01 AC AE A2 34 1B 16 00 19 0D B8 AD
             73 01 01 A1 34 1D 08 AC A2 74 90 01 07 FF BB 9F 34 16 01 85 00 AC
             B9 72 48 91 01 2D 61 16 01 9D 34 9F 34 1C 56 68 03 02 72 49 AC 0E
             03 5D 0F 03 15 19 0D)
       (#Y(|SWANK|::|RECURSIVELY-COMPUTE-MOST-COMPLETIONS-SHORT-CUR|
           #36Y(00 00 00 00 00 00 00 00 06 01 69 00 02 69 00 01 72 48 90 01 2D
                0B 69 00 01 69 00 02 33 01 01 19 01 00 19 01)
           (|COMMON-LISP|::|NIL|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|) ()
           "Returns the next letter from the abbreviation, or NIL
            if all have been used.")
        #Y(|SWANK|::|RECURSIVELY-COMPUTE-MOST-COMPLETIONS-ADD-TO-CHUNK|
           #29Y(00 00 00 00 02 00 00 00 06 03 07 00 04 1C 04 9E 0C 00 05 AE 07
                00 04 5D 0C 00 04 19 03)
           (|COMMON-LISP|::|NIL|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|COMMON-LISP|::|CHAR| |SWANK|::|POS|)
           "Adds the CHAR at POS in FULL to the current chunk,
            marking the start position if it is empty.")
        #Y(|SWANK|::|RECURSIVELY-COMPUTE-MOST-COMPLETIONS-COLLECT-CHUNK|
           #54Y(00 00 00 00 00 00 00 00 06 01 07 00 04 1F 25 14 72 48 38 07 C6
                FD 07 00 04 FB 71 1D 72 4A 69 00 05 AD 7B 02 07 00 03 5D 0C 00
                03 00 0C 00 04 0C 00 05 19 02 19 01)
           (|COMMON-LISP|::|NIL| |COMMON-LISP|::|CHARACTER|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|) ()
           "Collects the current chunk to CHUNKS and prepares for
            a new chunk.")
        |SWANK|::|*ALL-CHUNKS*| |SWANK|::|*FUZZY-RECURSION-SOFT-LIMIT*|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|SHORT| |SWANK|::|FULL| |SWANK|::|SHORT-INDEX|
        |SWANK|::|INITIAL-FULL-INDEX| |SWANK|::|CHUNKS|
        |SWANK|::|CURRENT-CHUNK| |SWANK|::|CURRENT-CHUNK-POS|
        |SWANK|::|RECURSE-P|)
       "Recursively (if RECURSE-P is true) find /most/ possible ways
to fuzzily map the letters in SHORT onto FULL, using CHAR= to
determine if two letters match.

A chunk is a list of elements that have matched consecutively.
When consecutive matches stop, it is coerced into a string,
paired with the starting position of the chunk, and pushed onto
CHUNKS.

Whenever a letter matches, if RECURSE-P is true,
RECURSIVELY-COMPUTE-MOST-COMPLETIONS calls itself with a position
one index ahead, to find other possibly higher scoring
possibilities.  If there are less than
*FUZZY-RECURSION-SOFT-LIMIT* results in *ALL-CHUNKS* currently,
this call will also recurse.

Once a word has been completely matched, the chunks are pushed
onto the special variable *ALL-CHUNKS* and the function returns."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|527 532 (DEFVAR *FUZZY-COMPLETION-SYMBOL-PREFIXES* "*+-%&?<" ...)-24|
   #30Y(00 00 00 00 00 00 00 00 00 01 DA 31 5A DB 8C 4F 04 DB DC 31 52 DB DD DE
        2D 03 05 C6 19 01)
   ((|COMMON-LISP|::|SPECIAL| |SWANK|::|*FUZZY-COMPLETION-SYMBOL-PREFIXES*|)
    |SWANK|::|*FUZZY-COMPLETION-SYMBOL-PREFIXES*| "*+-%&?<"
    |COMMON-LISP|::|VARIABLE|
    "Letters that are likely to be at the beginning of a symbol.
Letters found after one of these prefixes will be scored as if
they were at the beginning of ths symbol."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|533 536 (DEFVAR *FUZZY-COMPLETION-SYMBOL-SUFFIXES* "*+->" ...)-25|
   #30Y(00 00 00 00 00 00 00 00 00 01 DA 31 5A DB 8C 4F 04 DB DC 31 52 DB DD DE
        2D 03 05 C6 19 01)
   ((|COMMON-LISP|::|SPECIAL| |SWANK|::|*FUZZY-COMPLETION-SYMBOL-SUFFIXES*|)
    |SWANK|::|*FUZZY-COMPLETION-SYMBOL-SUFFIXES*| "*+->"
    |COMMON-LISP|::|VARIABLE|
    "Letters that are likely to be at the end of a symbol.
Letters found before one of these suffixes will be scored as if
they were at the end of the symbol."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|537 540 (DEFVAR *FUZZY-COMPLETION-WORD-SEPARATORS* "-/." ...)-26|
   #30Y(00 00 00 00 00 00 00 00 00 01 DA 31 5A DB 8C 4F 04 DB DC 31 52 DB DD DE
        2D 03 05 C6 19 01)
   ((|COMMON-LISP|::|SPECIAL| |SWANK|::|*FUZZY-COMPLETION-WORD-SEPARATORS*|)
    |SWANK|::|*FUZZY-COMPLETION-WORD-SEPARATORS*| "-/."
    |COMMON-LISP|::|VARIABLE|
    "Letters that separate different words in symbols.  Letters
after one of these symbols will be scores more highly than other
letters."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|542 605 (DEFUN SCORE-COMPLETION (COMPLETION SHORT FULL) ...)-27|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|SCORE-COMPLETION| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|SCORE-COMPLETION|
       #118Y(00 00 00 00 03 00 00 00 06 04 00 2B 01 7F 02 00 00 9D 2B 07 AC 2C
             00 01 0B 00 00 AC 2C 01 01 0B 00 01 AC 2C 02 01 0B 00 02 AC 2C 03
             01 0B 00 03 AC 2C 04 01 0B 00 04 AC 2C 05 01 0B 00 05 AC 2C 06 01
             0B 00 06 AC 6D 07 01 AC B3 73 00 16 E2 68 04 00 72 48 B4 72 48 73
             01 36 72 97 73 01 38 E3 AE 38 05 72 4C AD 73 02 35 E4 AF B7 73 01
             16 AE 7B 02 40 02 19 09)
       (#Y(|SWANK|::|SCORE-COMPLETION-AFTER-PREFIX-P|
           #34Y(00 00 00 00 01 00 00 00 06 02 AD DB 33 01 2D 1F 0F 69 01 01 DC
                73 01 01 6B 03 38 06 32 5D 19 02 19 02)
           (|COMMON-LISP|::|NIL| 1. 0.
            |SWANK|::|*FUZZY-COMPLETION-SYMBOL-PREFIXES*|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|POS|) |COMMON-LISP|::|NIL|)
        #Y(|SWANK|::|SCORE-COMPLETION-WORD-SEPARATOR-P|
           #25Y(00 00 00 00 01 00 00 00 06 02 69 01 01 AE 73 01 01 6B 01 38 06
                32 5D 19 02)
           (|COMMON-LISP|::|NIL| |SWANK|::|*FUZZY-COMPLETION-WORD-SEPARATORS*|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|POS|) |COMMON-LISP|::|NIL|)
        #Y(|SWANK|::|SCORE-COMPLETION-AFTER-WORD-SEPARATOR-P|
           #26Y(00 00 00 00 01 00 00 00 06 02 69 01 01 97 02 73 01 01 6B 01 38
                06 32 5D 19 02)
           (|COMMON-LISP|::|NIL| |SWANK|::|*FUZZY-COMPLETION-WORD-SEPARATORS*|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|POS|) |COMMON-LISP|::|NIL|)
        #Y(|SWANK|::|SCORE-COMPLETION-AT-END-P|
           #23Y(00 00 00 00 01 00 00 00 06 02 AD 69 01 01 72 48 72 98 33 01 2D
                19 02)
           (|COMMON-LISP|::|NIL|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
           (|SWANK|::|POS|) |COMMON-LISP|::|NIL|)
        #Y(|SWANK|::|SCORE-COMPLETION-BEFORE-SUFFIX-P|
           #48Y(00 00 00 00 01 00 00 00 06 02 AD DB 69 01 01 72 48 73 02 35 33
                01 2D 1F 15 69 01 01 69 01 01 72 48 72 98 73 01 01 6B 02 38 06
                32 5D 19 02 19 02)
           (|COMMON-LISP|::|NIL| -2.
            |SWANK|::|*FUZZY-COMPLETION-SYMBOL-SUFFIXES*|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|POS|) |COMMON-LISP|::|NIL|)
        #Y(|SWANK|::|SCORE-COMPLETION-SCORE-OR-PERCENTAGE-OF-PREVIOUS|
           #42Y(00 00 00 00 03 00 00 00 06 04 AD 8E 92 19 AF DB 97 04 97 04 07
                00 07 74 73 02 37 DC B0 72 9B 73 02 35 33 01 33 19 04 A0 19 04)
           (|COMMON-LISP|::|NIL| 0.85f0 1.2f0)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|BASE-SCORE| |SWANK|::|POS| |SWANK|::|CHUNK-POS|)
           |COMMON-LISP|::|NIL|)
        #Y(|SWANK|::|SCORE-COMPLETION-SCORE-CHAR|
           #78Y(00 00 00 00 02 00 00 00 06 03 AE C6 34 1C 2D AE 07 00 01 34 1C
                29 AE 07 00 02 34 1C 25 AE 07 00 03 34 1C 21 AE 07 00 04 34 1C
                1D AE 07 00 05 34 1C 19 C8 14 AF AF 07 00 06 34 19 03 C7 1B 74
                C7 1B 71 C8 1B 6E C9 1B 6B CA 1B 68 CA 1B 65)
           (|COMMON-LISP|::|NIL|
            #Y(|SWANK|::|SCORE-COMPLETION-AT-BEGINNING-P|
               #15Y(00 00 00 00 01 00 00 00 06 02 AD 32 92 19 02) ()
               (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
               (|SWANK|::|POS|) |COMMON-LISP|::|NIL|)
            10. 1. 8. 6.)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|POS| |SWANK|::|CHUNK-POS|) |COMMON-LISP|::|NIL|)
        #Y(|SWANK|::|SCORE-COMPLETION-SCORE-CHUNK|
           #47Y(00 00 00 00 01 00 00 00 06 02 9E 5C 78 72 48 DB 63 DB 87 05 01
                1B 0F AC AE B0 07 00 07 74 82 02 35 00 85 02 85 01 AE B0 91 01
                32 6B 15 19 05)
           (|COMMON-LISP|::|NIL| 0.)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|SWANK|::|CHUNK|) |COMMON-LISP|::|NIL|)
        10.0f0 #.#'|COMMON-LISP|::|+| #.#'|COMMON-LISP|::|LIST|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|COMPLETION| |SWANK|::|SHORT| |SWANK|::|FULL|)
       "Scores the completion chunks COMPLETION as a completion from
the abbreviation SHORT to the full string FULL.  COMPLETION is a
list like:
    ((0 \"mul\") (9 \"v\") (15 \"b\"))
Which, if SHORT were \"mulvb\" and full were \"multiple-value-bind\", 
would indicate that it completed as such (completed letters
capitalized):
    MULtiple-Value-Bind

Letters are given scores based on their position in the string.
Letters at the beginning of a string or after a prefix letter at
the beginning of a string are scored highest.  Letters after a
word separator such as #- are scored next highest.  Letters at
the end of a string or before a suffix letter at the end of a
string are scored medium, and letters anywhere else are scored
low.

If a letter is directly after another matched letter, and its
intrinsic value in that position is less than a percentage of the
previous letter's value, it will use that percentage instead.

Finally, a small scaling factor is applied to favor shorter
matches, all other things being equal."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|607 618 (DEFUN HIGHLIGHT-COMPLETION (COMPLETION FULL) ...)-28|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|HIGHLIGHT-COMPLETION| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|HIGHLIGHT-COMPLETION|
       #51Y(00 00 00 00 02 00 00 00 06 03 AD 72 47 38 02 71 47 AF 63 1B 15 87
            01 00 AE 94 01 94 02 A0 5C 78 72 48 73 02 35 80 45 02 83 01 AD 8D
            94 67 16 02 15 19 03)
       () (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|COMPLETION| |SWANK|::|FULL|)
       "Given a chunk definition COMPLETION and the string FULL,
HIGHLIGHT-COMPLETION will create a string that demonstrates where
the completion matched in the string.  Matches will be
capitalized, while the rest of the string will be lower-case."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|620 628 (DEFUN FORMAT-FUZZY-COMPLETION-SET (WINNERS) ...)-29|
   #20Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 DA DC 32 83 C5 19 01)
   (|SWANK|::|FORMAT-FUZZY-COMPLETION-SET| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|SWANK|::|FORMAT-FUZZY-COMPLETION-SET|
       #76Y(00 00 00 00 01 00 00 00 06 02 AD 01 02 1B 0C 87 02 01 78 72 48 AD
            30 00 F8 83 02 AE 8D 94 70 15 16 01 F8 63 AF 01 03 1B 1C 87 03 04
            5B FA 83 04 5B F9 A1 5C 5B F8 DB 6B 02 B3 AF B2 70 03 B1 B1 33 05
            15 83 03 AF 8D 94 60 00 19 08)
       (|SYSTEM|::|MAX-IF|
        #Y(|SWANK|::|FORMAT-FUZZY-COMPLETION-SET-1|
           #53Y(00 00 00 00 05 00 00 00 01 00 B2 31 8E B2 01 02 B4 01 03 B7 2D
                08 00 DB B3 38 02 31 8B B2 01 02 DC DD 01 03 B7 2D 09 04 DF B3
                38 02 31 8B AE B3 31 86 9E 19 07)
           (|SYSTEM|::|DO-FORMAT-ASCII| "  score " 8. 2.
            |SYSTEM|::|DO-FORMAT-FIXED-FLOAT| "  ")
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        |COMMON-LISP|::|*STANDARD-OUTPUT*| |SWANK|::|HIGHLIGHT-COMPLETION|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SWANK|::|WINNERS|)
       "Given a list of completion objects such as on returned by
FUZZY-COMPLETION-SET, format the list into user-readable output
for interactive debugging purpose."))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|630 630 (PROVIDE :SWANK-FUZZY)-30|
   #15Y(00 00 00 00 00 00 00 00 00 01 DA 2F 01 19 01)
   (:|SWANK-FUZZY| |COMMON-LISP|::|PROVIDE|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
